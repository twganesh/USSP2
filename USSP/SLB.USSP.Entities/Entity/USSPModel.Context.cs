//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SLB.USSP.Entities.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class USSPEntities : DbContext
    {
        public USSPEntities()
            : base("name=USSPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<WSSE_SHIP> WSSE_SHIP { get; set; }
        public virtual DbSet<T_PROD_WITH_INPUT_PROD> T_PROD_WITH_INPUT_PROD { get; set; }
        public virtual DbSet<T_PROD_WITH_INPUT_PROD_GROUPS> T_PROD_WITH_INPUT_PROD_GROUPS { get; set; }
        public virtual DbSet<WSSE_DOT_SHIP> WSSE_DOT_SHIP { get; set; }
        public virtual DbSet<WSSE_LOGGER> WSSE_LOGGER { get; set; }
        public virtual DbSet<WSSE_MAT_SHIP> WSSE_MAT_SHIP { get; set; }
        public virtual DbSet<WSSE_PICKLISTS> WSSE_PICKLISTS { get; set; }
        public virtual DbSet<WSSE_RAD_CONFIG> WSSE_RAD_CONFIG { get; set; }
        public virtual DbSet<WSSE_RAD_DETAILS> WSSE_RAD_DETAILS { get; set; }
        public virtual DbSet<WSSE_RAD_LABELS> WSSE_RAD_LABELS { get; set; }
        public virtual DbSet<WSSE_RAD_SHIP> WSSE_RAD_SHIP { get; set; }
        public virtual DbSet<WSSE_USER> WSSE_USER { get; set; }
        public virtual DbSet<WSSE_USERMAP> WSSE_USERMAP { get; set; }
        public virtual DbSet<W_PROD_WITH_INPUT_PROD> W_PROD_WITH_INPUT_PROD { get; set; }
        public virtual DbSet<WSSE_SHIP_KINETIX_VW> WSSE_SHIP_KINETIX_VW { get; set; }
        public virtual DbSet<IPC_FEEDBACK> IPC_FEEDBACK { get; set; }
        public virtual DbSet<IPC_FEEDBACK_CATEGORY> IPC_FEEDBACK_CATEGORY { get; set; }
        public virtual DbSet<IPC_FEEDBACK_PICKLISTS> IPC_FEEDBACK_PICKLISTS { get; set; }
        public virtual DbSet<IPC_FEEDBACK_PROJUSERS> IPC_FEEDBACK_PROJUSERS { get; set; }
        public virtual DbSet<IPC_FEEDBACK_USERMAP> IPC_FEEDBACK_USERMAP { get; set; }
        public virtual DbSet<IPC_FEEDBACK_USERS> IPC_FEEDBACK_USERS { get; set; }
        public virtual DbSet<T_PHRASE_LINKAGE> T_PHRASE_LINKAGE { get; set; }
        public virtual DbSet<T_PHRASE_TRANSLATIONS> T_PHRASE_TRANSLATIONS { get; set; }
        public virtual DbSet<T_PROD_TEXT> T_PROD_TEXT { get; set; }
        public virtual DbSet<WSSE_MESSAGE> WSSE_MESSAGE { get; set; }
        public virtual DbSet<WSSE_TMS_PRODUCTS> WSSE_TMS_PRODUCTS { get; set; }
    
        public virtual int DOTSHIPINSERT(string iCAT, string iPRODUCT, string iORDERRELEASEID, Nullable<decimal> iACTUAL_QTY, string iACTUAL_UNIT, string iPACKTYPE, string iPACKLOC, Nullable<decimal> iPACKNO, string iBULKITEM, Nullable<decimal> iSHIPID, Nullable<decimal> iSORT, Nullable<decimal> iRESIDUE, string iUPDATE_BY, ObjectParameter oDOTSHIPID)
        {
            var iCATParameter = iCAT != null ?
                new ObjectParameter("ICAT", iCAT) :
                new ObjectParameter("ICAT", typeof(string));
    
            var iPRODUCTParameter = iPRODUCT != null ?
                new ObjectParameter("IPRODUCT", iPRODUCT) :
                new ObjectParameter("IPRODUCT", typeof(string));
    
            var iORDERRELEASEIDParameter = iORDERRELEASEID != null ?
                new ObjectParameter("IORDERRELEASEID", iORDERRELEASEID) :
                new ObjectParameter("IORDERRELEASEID", typeof(string));
    
            var iACTUAL_QTYParameter = iACTUAL_QTY.HasValue ?
                new ObjectParameter("IACTUAL_QTY", iACTUAL_QTY) :
                new ObjectParameter("IACTUAL_QTY", typeof(decimal));
    
            var iACTUAL_UNITParameter = iACTUAL_UNIT != null ?
                new ObjectParameter("IACTUAL_UNIT", iACTUAL_UNIT) :
                new ObjectParameter("IACTUAL_UNIT", typeof(string));
    
            var iPACKTYPEParameter = iPACKTYPE != null ?
                new ObjectParameter("IPACKTYPE", iPACKTYPE) :
                new ObjectParameter("IPACKTYPE", typeof(string));
    
            var iPACKLOCParameter = iPACKLOC != null ?
                new ObjectParameter("IPACKLOC", iPACKLOC) :
                new ObjectParameter("IPACKLOC", typeof(string));
    
            var iPACKNOParameter = iPACKNO.HasValue ?
                new ObjectParameter("IPACKNO", iPACKNO) :
                new ObjectParameter("IPACKNO", typeof(decimal));
    
            var iBULKITEMParameter = iBULKITEM != null ?
                new ObjectParameter("IBULKITEM", iBULKITEM) :
                new ObjectParameter("IBULKITEM", typeof(string));
    
            var iSHIPIDParameter = iSHIPID.HasValue ?
                new ObjectParameter("ISHIPID", iSHIPID) :
                new ObjectParameter("ISHIPID", typeof(decimal));
    
            var iSORTParameter = iSORT.HasValue ?
                new ObjectParameter("ISORT", iSORT) :
                new ObjectParameter("ISORT", typeof(decimal));
    
            var iRESIDUEParameter = iRESIDUE.HasValue ?
                new ObjectParameter("IRESIDUE", iRESIDUE) :
                new ObjectParameter("IRESIDUE", typeof(decimal));
    
            var iUPDATE_BYParameter = iUPDATE_BY != null ?
                new ObjectParameter("IUPDATE_BY", iUPDATE_BY) :
                new ObjectParameter("IUPDATE_BY", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DOTSHIPINSERT", iCATParameter, iPRODUCTParameter, iORDERRELEASEIDParameter, iACTUAL_QTYParameter, iACTUAL_UNITParameter, iPACKTYPEParameter, iPACKLOCParameter, iPACKNOParameter, iBULKITEMParameter, iSHIPIDParameter, iSORTParameter, iRESIDUEParameter, iUPDATE_BYParameter, oDOTSHIPID);
        }
    
        public virtual int SHIPINSERT(string iWELLSITE, string iDISTRICT, string iOPERATOR, string iSHIP_DATE, string iTREATMENT, string iTRUCK_NO, string iTRAILER_NO, string iCUSTOMER, string iLOCATION, string iWELL, string iINSTRUCTIONS, string iSAFETY, string iSUPERVISOR, string iUSERID, string iCREATE_BY, Nullable<decimal> iLOAD_DIFF, string iRETURN_DATE, Nullable<decimal> iVERSION, string iCERT_SIGN, string iLOAD_SIGN, string iSHIPMENTID, string iSTOPNUMBER, string iORIGIN, string iDESTINATION, Nullable<decimal> iNUMOFSTOPSTMS, Nullable<decimal> iRADIOACTIVE, Nullable<decimal> iCOLORADO, ObjectParameter oSHIPID)
        {
            var iWELLSITEParameter = iWELLSITE != null ?
                new ObjectParameter("IWELLSITE", iWELLSITE) :
                new ObjectParameter("IWELLSITE", typeof(string));
    
            var iDISTRICTParameter = iDISTRICT != null ?
                new ObjectParameter("IDISTRICT", iDISTRICT) :
                new ObjectParameter("IDISTRICT", typeof(string));
    
            var iOPERATORParameter = iOPERATOR != null ?
                new ObjectParameter("IOPERATOR", iOPERATOR) :
                new ObjectParameter("IOPERATOR", typeof(string));
    
            var iSHIP_DATEParameter = iSHIP_DATE != null ?
                new ObjectParameter("ISHIP_DATE", iSHIP_DATE) :
                new ObjectParameter("ISHIP_DATE", typeof(string));
    
            var iTREATMENTParameter = iTREATMENT != null ?
                new ObjectParameter("ITREATMENT", iTREATMENT) :
                new ObjectParameter("ITREATMENT", typeof(string));
    
            var iTRUCK_NOParameter = iTRUCK_NO != null ?
                new ObjectParameter("ITRUCK_NO", iTRUCK_NO) :
                new ObjectParameter("ITRUCK_NO", typeof(string));
    
            var iTRAILER_NOParameter = iTRAILER_NO != null ?
                new ObjectParameter("ITRAILER_NO", iTRAILER_NO) :
                new ObjectParameter("ITRAILER_NO", typeof(string));
    
            var iCUSTOMERParameter = iCUSTOMER != null ?
                new ObjectParameter("ICUSTOMER", iCUSTOMER) :
                new ObjectParameter("ICUSTOMER", typeof(string));
    
            var iLOCATIONParameter = iLOCATION != null ?
                new ObjectParameter("ILOCATION", iLOCATION) :
                new ObjectParameter("ILOCATION", typeof(string));
    
            var iWELLParameter = iWELL != null ?
                new ObjectParameter("IWELL", iWELL) :
                new ObjectParameter("IWELL", typeof(string));
    
            var iINSTRUCTIONSParameter = iINSTRUCTIONS != null ?
                new ObjectParameter("IINSTRUCTIONS", iINSTRUCTIONS) :
                new ObjectParameter("IINSTRUCTIONS", typeof(string));
    
            var iSAFETYParameter = iSAFETY != null ?
                new ObjectParameter("ISAFETY", iSAFETY) :
                new ObjectParameter("ISAFETY", typeof(string));
    
            var iSUPERVISORParameter = iSUPERVISOR != null ?
                new ObjectParameter("ISUPERVISOR", iSUPERVISOR) :
                new ObjectParameter("ISUPERVISOR", typeof(string));
    
            var iUSERIDParameter = iUSERID != null ?
                new ObjectParameter("IUSERID", iUSERID) :
                new ObjectParameter("IUSERID", typeof(string));
    
            var iCREATE_BYParameter = iCREATE_BY != null ?
                new ObjectParameter("ICREATE_BY", iCREATE_BY) :
                new ObjectParameter("ICREATE_BY", typeof(string));
    
            var iLOAD_DIFFParameter = iLOAD_DIFF.HasValue ?
                new ObjectParameter("ILOAD_DIFF", iLOAD_DIFF) :
                new ObjectParameter("ILOAD_DIFF", typeof(decimal));
    
            var iRETURN_DATEParameter = iRETURN_DATE != null ?
                new ObjectParameter("IRETURN_DATE", iRETURN_DATE) :
                new ObjectParameter("IRETURN_DATE", typeof(string));
    
            var iVERSIONParameter = iVERSION.HasValue ?
                new ObjectParameter("IVERSION", iVERSION) :
                new ObjectParameter("IVERSION", typeof(decimal));
    
            var iCERT_SIGNParameter = iCERT_SIGN != null ?
                new ObjectParameter("ICERT_SIGN", iCERT_SIGN) :
                new ObjectParameter("ICERT_SIGN", typeof(string));
    
            var iLOAD_SIGNParameter = iLOAD_SIGN != null ?
                new ObjectParameter("ILOAD_SIGN", iLOAD_SIGN) :
                new ObjectParameter("ILOAD_SIGN", typeof(string));
    
            var iSHIPMENTIDParameter = iSHIPMENTID != null ?
                new ObjectParameter("ISHIPMENTID", iSHIPMENTID) :
                new ObjectParameter("ISHIPMENTID", typeof(string));
    
            var iSTOPNUMBERParameter = iSTOPNUMBER != null ?
                new ObjectParameter("ISTOPNUMBER", iSTOPNUMBER) :
                new ObjectParameter("ISTOPNUMBER", typeof(string));
    
            var iORIGINParameter = iORIGIN != null ?
                new ObjectParameter("IORIGIN", iORIGIN) :
                new ObjectParameter("IORIGIN", typeof(string));
    
            var iDESTINATIONParameter = iDESTINATION != null ?
                new ObjectParameter("IDESTINATION", iDESTINATION) :
                new ObjectParameter("IDESTINATION", typeof(string));
    
            var iNUMOFSTOPSTMSParameter = iNUMOFSTOPSTMS.HasValue ?
                new ObjectParameter("INUMOFSTOPSTMS", iNUMOFSTOPSTMS) :
                new ObjectParameter("INUMOFSTOPSTMS", typeof(decimal));
    
            var iRADIOACTIVEParameter = iRADIOACTIVE.HasValue ?
                new ObjectParameter("IRADIOACTIVE", iRADIOACTIVE) :
                new ObjectParameter("IRADIOACTIVE", typeof(decimal));
    
            var iCOLORADOParameter = iCOLORADO.HasValue ?
                new ObjectParameter("ICOLORADO", iCOLORADO) :
                new ObjectParameter("ICOLORADO", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SHIPINSERT", iWELLSITEParameter, iDISTRICTParameter, iOPERATORParameter, iSHIP_DATEParameter, iTREATMENTParameter, iTRUCK_NOParameter, iTRAILER_NOParameter, iCUSTOMERParameter, iLOCATIONParameter, iWELLParameter, iINSTRUCTIONSParameter, iSAFETYParameter, iSUPERVISORParameter, iUSERIDParameter, iCREATE_BYParameter, iLOAD_DIFFParameter, iRETURN_DATEParameter, iVERSIONParameter, iCERT_SIGNParameter, iLOAD_SIGNParameter, iSHIPMENTIDParameter, iSTOPNUMBERParameter, iORIGINParameter, iDESTINATIONParameter, iNUMOFSTOPSTMSParameter, iRADIOACTIVEParameter, iCOLORADOParameter, oSHIPID);
        }
    
        public virtual int SHIPUPDATE(string iWELLSITE, string iDISTRICT, string iOPERATOR, Nullable<System.DateTime> iSHIP_DATE, string iTREATMENT, string iTRUCK_NO, string iTRAILER_NO, string iCUSTOMER, string iLOCATION, string iWELL, string iINSTRUCTIONS, string iSAFETY, string iSUPERVISOR, string iUSERID, string iUPDATE_BY, Nullable<decimal> iLOAD_DIFF, Nullable<System.DateTime> iRETURN_DATE, Nullable<decimal> iVERSION, string iCERT_SIGN, string iLOAD_SIGN, Nullable<decimal> iRADIOACTIVE, Nullable<decimal> iCOLORADO, Nullable<decimal> iSHIPID)
        {
            var iWELLSITEParameter = iWELLSITE != null ?
                new ObjectParameter("IWELLSITE", iWELLSITE) :
                new ObjectParameter("IWELLSITE", typeof(string));
    
            var iDISTRICTParameter = iDISTRICT != null ?
                new ObjectParameter("IDISTRICT", iDISTRICT) :
                new ObjectParameter("IDISTRICT", typeof(string));
    
            var iOPERATORParameter = iOPERATOR != null ?
                new ObjectParameter("IOPERATOR", iOPERATOR) :
                new ObjectParameter("IOPERATOR", typeof(string));
    
            var iSHIP_DATEParameter = iSHIP_DATE.HasValue ?
                new ObjectParameter("ISHIP_DATE", iSHIP_DATE) :
                new ObjectParameter("ISHIP_DATE", typeof(System.DateTime));
    
            var iTREATMENTParameter = iTREATMENT != null ?
                new ObjectParameter("ITREATMENT", iTREATMENT) :
                new ObjectParameter("ITREATMENT", typeof(string));
    
            var iTRUCK_NOParameter = iTRUCK_NO != null ?
                new ObjectParameter("ITRUCK_NO", iTRUCK_NO) :
                new ObjectParameter("ITRUCK_NO", typeof(string));
    
            var iTRAILER_NOParameter = iTRAILER_NO != null ?
                new ObjectParameter("ITRAILER_NO", iTRAILER_NO) :
                new ObjectParameter("ITRAILER_NO", typeof(string));
    
            var iCUSTOMERParameter = iCUSTOMER != null ?
                new ObjectParameter("ICUSTOMER", iCUSTOMER) :
                new ObjectParameter("ICUSTOMER", typeof(string));
    
            var iLOCATIONParameter = iLOCATION != null ?
                new ObjectParameter("ILOCATION", iLOCATION) :
                new ObjectParameter("ILOCATION", typeof(string));
    
            var iWELLParameter = iWELL != null ?
                new ObjectParameter("IWELL", iWELL) :
                new ObjectParameter("IWELL", typeof(string));
    
            var iINSTRUCTIONSParameter = iINSTRUCTIONS != null ?
                new ObjectParameter("IINSTRUCTIONS", iINSTRUCTIONS) :
                new ObjectParameter("IINSTRUCTIONS", typeof(string));
    
            var iSAFETYParameter = iSAFETY != null ?
                new ObjectParameter("ISAFETY", iSAFETY) :
                new ObjectParameter("ISAFETY", typeof(string));
    
            var iSUPERVISORParameter = iSUPERVISOR != null ?
                new ObjectParameter("ISUPERVISOR", iSUPERVISOR) :
                new ObjectParameter("ISUPERVISOR", typeof(string));
    
            var iUSERIDParameter = iUSERID != null ?
                new ObjectParameter("IUSERID", iUSERID) :
                new ObjectParameter("IUSERID", typeof(string));
    
            var iUPDATE_BYParameter = iUPDATE_BY != null ?
                new ObjectParameter("IUPDATE_BY", iUPDATE_BY) :
                new ObjectParameter("IUPDATE_BY", typeof(string));
    
            var iLOAD_DIFFParameter = iLOAD_DIFF.HasValue ?
                new ObjectParameter("ILOAD_DIFF", iLOAD_DIFF) :
                new ObjectParameter("ILOAD_DIFF", typeof(decimal));
    
            var iRETURN_DATEParameter = iRETURN_DATE.HasValue ?
                new ObjectParameter("IRETURN_DATE", iRETURN_DATE) :
                new ObjectParameter("IRETURN_DATE", typeof(System.DateTime));
    
            var iVERSIONParameter = iVERSION.HasValue ?
                new ObjectParameter("IVERSION", iVERSION) :
                new ObjectParameter("IVERSION", typeof(decimal));
    
            var iCERT_SIGNParameter = iCERT_SIGN != null ?
                new ObjectParameter("ICERT_SIGN", iCERT_SIGN) :
                new ObjectParameter("ICERT_SIGN", typeof(string));
    
            var iLOAD_SIGNParameter = iLOAD_SIGN != null ?
                new ObjectParameter("ILOAD_SIGN", iLOAD_SIGN) :
                new ObjectParameter("ILOAD_SIGN", typeof(string));
    
            var iRADIOACTIVEParameter = iRADIOACTIVE.HasValue ?
                new ObjectParameter("IRADIOACTIVE", iRADIOACTIVE) :
                new ObjectParameter("IRADIOACTIVE", typeof(decimal));
    
            var iCOLORADOParameter = iCOLORADO.HasValue ?
                new ObjectParameter("ICOLORADO", iCOLORADO) :
                new ObjectParameter("ICOLORADO", typeof(decimal));
    
            var iSHIPIDParameter = iSHIPID.HasValue ?
                new ObjectParameter("ISHIPID", iSHIPID) :
                new ObjectParameter("ISHIPID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SHIPUPDATE", iWELLSITEParameter, iDISTRICTParameter, iOPERATORParameter, iSHIP_DATEParameter, iTREATMENTParameter, iTRUCK_NOParameter, iTRAILER_NOParameter, iCUSTOMERParameter, iLOCATIONParameter, iWELLParameter, iINSTRUCTIONSParameter, iSAFETYParameter, iSUPERVISORParameter, iUSERIDParameter, iUPDATE_BYParameter, iLOAD_DIFFParameter, iRETURN_DATEParameter, iVERSIONParameter, iCERT_SIGNParameter, iLOAD_SIGNParameter, iRADIOACTIVEParameter, iCOLORADOParameter, iSHIPIDParameter);
        }
    
        public virtual int GETSHIPMENTKINETIX(string p_IN_SHIPMENTID, string p_IN_STOPNUMBER, string p_IN_ORIGIN, string p_IN_DESTINATION)
        {
            var p_IN_SHIPMENTIDParameter = p_IN_SHIPMENTID != null ?
                new ObjectParameter("P_IN_SHIPMENTID", p_IN_SHIPMENTID) :
                new ObjectParameter("P_IN_SHIPMENTID", typeof(string));
    
            var p_IN_STOPNUMBERParameter = p_IN_STOPNUMBER != null ?
                new ObjectParameter("P_IN_STOPNUMBER", p_IN_STOPNUMBER) :
                new ObjectParameter("P_IN_STOPNUMBER", typeof(string));
    
            var p_IN_ORIGINParameter = p_IN_ORIGIN != null ?
                new ObjectParameter("P_IN_ORIGIN", p_IN_ORIGIN) :
                new ObjectParameter("P_IN_ORIGIN", typeof(string));
    
            var p_IN_DESTINATIONParameter = p_IN_DESTINATION != null ?
                new ObjectParameter("P_IN_DESTINATION", p_IN_DESTINATION) :
                new ObjectParameter("P_IN_DESTINATION", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GETSHIPMENTKINETIX", p_IN_SHIPMENTIDParameter, p_IN_STOPNUMBERParameter, p_IN_ORIGINParameter, p_IN_DESTINATIONParameter);
        }
    
        public virtual int TMSPRODUCTINSERT(string iSHIPMENTID, string iSOURCE, string iDESTINATION, string iSTOPNUMBER, string iPRODUCTCODE, Nullable<decimal> iSHIPID, Nullable<decimal> iISDELETED)
        {
            var iSHIPMENTIDParameter = iSHIPMENTID != null ?
                new ObjectParameter("ISHIPMENTID", iSHIPMENTID) :
                new ObjectParameter("ISHIPMENTID", typeof(string));
    
            var iSOURCEParameter = iSOURCE != null ?
                new ObjectParameter("ISOURCE", iSOURCE) :
                new ObjectParameter("ISOURCE", typeof(string));
    
            var iDESTINATIONParameter = iDESTINATION != null ?
                new ObjectParameter("IDESTINATION", iDESTINATION) :
                new ObjectParameter("IDESTINATION", typeof(string));
    
            var iSTOPNUMBERParameter = iSTOPNUMBER != null ?
                new ObjectParameter("ISTOPNUMBER", iSTOPNUMBER) :
                new ObjectParameter("ISTOPNUMBER", typeof(string));
    
            var iPRODUCTCODEParameter = iPRODUCTCODE != null ?
                new ObjectParameter("IPRODUCTCODE", iPRODUCTCODE) :
                new ObjectParameter("IPRODUCTCODE", typeof(string));
    
            var iSHIPIDParameter = iSHIPID.HasValue ?
                new ObjectParameter("ISHIPID", iSHIPID) :
                new ObjectParameter("ISHIPID", typeof(decimal));
    
            var iISDELETEDParameter = iISDELETED.HasValue ?
                new ObjectParameter("IISDELETED", iISDELETED) :
                new ObjectParameter("IISDELETED", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TMSPRODUCTINSERT", iSHIPMENTIDParameter, iSOURCEParameter, iDESTINATIONParameter, iSTOPNUMBERParameter, iPRODUCTCODEParameter, iSHIPIDParameter, iISDELETEDParameter);
        }
    }
}
